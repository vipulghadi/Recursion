--------------------------------------------------------------------------------------------------
vector<vector<string>>ans;
    bool isSafe(int i,int j,vector<string>&board){
      int n=board.size();
      for(int k=i-1;k>=0;k--) if(board[k][j]=='Q')return false;
      for(int l=i-1,m=j-1;l>=0&&m>=0;l--,m--)if(board[l][m]=='Q')return false;
      for(int l=i-1,m=j+1;l>=0&&m<n;l--,m++) if(board[l][m]=='Q')return false;
      return true;
    }
    void solve(int ind,int n,vector<string>&board){
        if(ind==n){
            ans.push_back(board);
            return;
        }
        for(int j=0;j<n;j++){
            if(isSafe(ind,j,board)){
                board[ind][j]='Q';
                solve(ind+1,n,board);
                board[ind][j]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        string cs="";
        for(int i=0;i<n;i++)cs+=".";
        vector<string>board(n,cs);
        solve(0,n,board);
        return ans;
    }
---------------------------------------------------------------------------------------------------------
