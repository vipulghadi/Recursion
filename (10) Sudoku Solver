--------------------------------------------------checking each cell via for loop -----------------------------------------------------------------------------
bool isValid(char c,int i,int j,vector<vector<char>>& board,int n)
   {   //row -column check
        for(int col=0;col<n;col++){
           if(board[i][col]==c)return false;
           if(board[col][j]==c)return false;
           if(board[3*(i/3)+col/3][3*(j/3)+col%3]==c)return false;
        }
        return true;

   }
   bool solve(vector<vector<char>>& board,int n)
   {  
       for(int i=0;i<n;i++){
           for(int j=0;j<n;j++){
               if(board[i][j]=='.'){
                   int flag=0;
                   for(char c='1';c<='9';c++){  
                       if(isValid(c,i,j,board,n)){
                           board[i][j]=c;
                           if(solve(board,n))return true;
                           board[i][j]='.';
                       }
                   }
                   if(flag==0)return false;
               }
           }
       }
       return true;
   }
    void solveSudoku(vector<vector<char>>& board) {
           int n=board.size();
           bool val=solve(board,n);
           
    }
------------------------------------------------checking each cell via recursion--------------------------------------------------------------------------
bool check(vector<vector<char>>& board,int i,int j,char c)
   {  
        int  n=board.size();
        for(int col=0;col<n;col++){
           if(board[i][col]==c)return false;
           if(board[col][j]==c)return false;
           if(board[3*(i/3)+col/3][3*(j/3)+col%3]==c)return false;
        }
        return true;
   }
bool solve(vector<vector<char>> &board, int i, int j)
{
    if(i==9) return true;
    if(j==9) return solve(board, i+1, 0);
    if(board[i][j] != '.') return solve(board, i, j+1);

    for(char c='1'; c<='9'; c++)
    {
        if(check(board, i, j, c))
        {
            board[i][j] = c;
            if(solve(board, i, j+1)) return true;
            board[i][j] = '.';
        }
    }
        
    return false;
}
    void solveSudoku(vector<vector<char>>& board) {
        solve(board,0,0);
    }
----------------------------------------------------------------------------------------------
