--------------------------------my solution -----------------------------------------------------------
vector<vector<string>>ans;
    int isPalindrome(string str){
        int s=0,e=str.size()-1;
        while(s<=e){
            if(str[s]!=str[e])return 0;
            s++;
            e--;
        }
        return 1;
    }
    void solve(int ind,string &s,vector<string>ds)
    {
        if(ind==s.size()){
            ans.push_back(ds);
            return;
        }
        string cstring="";
        for(int i=ind;i<s.size();i++)
        {
           cstring+=s[i];
           if(isPalindrome(cstring))
           {
               ds.push_back(cstring);
               solve(i+1,s,ds);
               ds.pop_back();
           }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<string>ds;
        solve(0,s,ds);
        return ans;
    }
----------------------------------small changes-------------------------------------------------------------------
class Solution {
public:
     vector<vector<string>>ans;
    int isPalindrome(string str,int s,int e){
        while(s<=e){
            if(str[s++]!=str[e--])return 0;
        }
        return 1;
    }
    void solve(int ind,string &s,vector<string>ds){
        if(ind==s.size()){
            ans.push_back(ds);
            return;
        }

        for(int i=ind;i<s.size();i++)
        { 
           if(isPalindrome(s,ind,i)){
               ds.push_back(s.substr(ind,i-ind+1));
               solve(i+1,s,ds);
               ds.pop_back();
           }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<string>ds;
        solve(0,s,ds);
        return ans;
    }
};
-----------------------------------------------------------------------------------------------------
