-------------------------solution 1-------------------------------------------------------------------
void solve(int i,int j,vector<vector<int>> &m,int n,string path,vector<string>&ans)
    {
        if(i==n-1&& j==n-1){
            ans.push_back(path);
            return;
        }
        if(i<0||i==n||j<0||j==n||m[i][j]==0||m[i][j]==-1)return;
        char dir[]={'U','D','L','R'};
        int x[]={-1,1,0,0};
        int y[]={0,0,-1,1};
        m[i][j]=-1;
        for(int k=0;k<4;k++)
        {
            path.push_back(dir[k]);
            solve(i+x[k],j+y[k],m,n,path,ans);
            path.pop_back();
        }
        m[i][j]=1;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        string path="";
        vector<string>ans;
        if(m[0][0]==0||m[n-1][n-1]==0)return{"-1"};
        solve(0,0,m,n,path,ans);
        return ans;
    }
------------------------------------solution 2--------------------------------------------------------

class Solution{
    public:
     void findPathHelper(int i, int j, vector < vector < int >> & a, int n, vector < string > & ans, string move,
    vector < vector < int >> & vis) {
    if (i == n - 1 && j == n - 1) {
      ans.push_back(move);
      return;
    }
    // downward
    if (i + 1 < n && !vis[i + 1][j] && a[i + 1][j] == 1) {
      vis[i][j] = 1;
      findPathHelper(i + 1, j, a, n, ans, move + 'D', vis);
      vis[i][j] = 0;
    }
    // left
    if (j - 1 >= 0 && !vis[i][j - 1] && a[i][j - 1] == 1) {
      vis[i][j] = 1;
      findPathHelper(i, j - 1, a, n, ans, move + 'L', vis);
      vis[i][j] = 0;
    }

    // right 
    if (j + 1 < n && !vis[i][j + 1] && a[i][j + 1] == 1) {
      vis[i][j] = 1;
      findPathHelper(i, j + 1, a, n, ans, move + 'R', vis);
      vis[i][j] = 0;
    }

    // upward
    if (i - 1 >= 0 && !vis[i - 1][j] && a[i - 1][j] == 1) {
      vis[i][j] = 1;
      findPathHelper(i - 1, j, a, n, ans, move + 'U', vis);
      vis[i][j] = 0;
    }
  }
    vector < string > findPath(vector < vector < int >> & m, int n) {
      vector < string > ans;
      vector < vector < int >> vis(n, vector < int > (n, 0));
      if (m[0][0] == 1) findPathHelper(0, 0, m, n, ans, "", vis);
      return ans;
    }

};
------------------------------------------------------------------------------------------------
